#!/usr/bin/env ruby
# Uses hub to create a release with next semantic version
#
# $ git releasenext [major|minor|*patch]
#

# main class
class ReleaseNext
  # initialize
  # @type can be :major, :minor, or :patch
  # @raise 'Working directory dirty' if working directory is dirty
  # @raise 'Out of sync with origin' unless synced
  # @raise 'Not semantic versioning' unless current version is semantic
  # @param type [String] type of version to increment
  # @return [ReleaseNext] new ReleaseNext object
  def initialize(type = nil, tool = 'hub')
    type ||= 'patch'
    @type = case type
            when /^maj/
              :major
            when /^min/
              :minor
            else
              :patch
            end
    @branch = branch

    @tool = case tool
            when /^h/i
              :hub
            when /^g/i
              :gh
            else
              raise "Unknown tool: #{tool}. Use "hub" or "gh"."
            end

    raise 'Working directory dirty' if dirty?

    raise 'Out of sync with origin' unless synced?
  end

  # check if working directory is dirty
  # @return true if working directory is dirty
  def dirty?
    stat = `git diff --shortstat 2> /dev/null | tail -n1`.strip
    return stat !~ /^\s*$/
  end

  # get current branch
  # @return current branch name
  def branch
    `git remote show origin | sed -n '/HEAD branch/s/.*: //p'`.strip
  end

  # check if local branch is in sync with origin
  # @return true if local branch is in sync with origin
  def synced?
    status = `git rev-list --left-right --count origin/#{@branch}...#{@branch}`.strip.gsub(/[\s\t]/, '')
    return status =~ /00/
  end

  # get current version number
  # @return current semantic version number
  def version
    current = `git tag| sed 's/[^0-9\.]//' | awk -F. '{printf("%04d.%04d.%04d\\n",$1,$2,$3);}'|sort|tail -1|awk -F. '{printf ("%d.%d.%d",$1 + 0, $2 + 0, $3 + 0);}'`.strip

    raise 'Not semantic versioning' unless current =~ /^\d+\.\d+\.\d+$/
    current
  end

  # increment version number
  # @type can be :major, :minor, or :patch
  # @return new semantic version number
  def next_version
    maj, min, patch = version.split(/\./)

    case @type
    when :major
      maj.next!
      min = 0
      patch = 0
    when :minor
      min.next!
      patch = 0
    else
      patch.next!
    end

    "#{maj}.#{min}.#{patch}"
  end

  # create a release with the next version number
  def release
    n = next_version
    if @tool == :gh
      puts `gh release create v#{n} --title "v#{n}" --notes "Release v#{n}"`
    else
      puts `hub release create -m "v#{n}" v#{n}`
    end
    puts `git pull`
    puts "Release v#{n} created successfully." # Added feedback on success
  end
end

if ARGV.length > 1 || ARGV[0] =~ /^-+(-h|help)$/
  puts "Create a release with the next semantic version using hub."
  puts "Usage: git releasenext [major|minor|*patch]"
  Process.exit 1
end

tool = 'hub'

## Test for hub and gh. If both exist, use hub. If hub doesn't exist and gh does, use gh. Otherwise raise an error.
if system('which hub > /dev/null 2>&1')
  tool = 'hub'
elsif system('which gh > /dev/null 2>&1')
  tool = 'gh'
else
  raise "Neither 'hub' nor 'gh' command found. Please install one of them."
end

# Create a new ReleaseNext object and call release
rn = ReleaseNext.new(ARGV[0], tool)
rn.release
