# ## Usage
#
# Usage for a typical user is easy.
#
# Save this file somewhere on your system. I like to put it
# in a folder I sync with Dropbox between my machines:
#
#      ~/.local/share/git/useful-git-aliases.conf
#
# Edit ~/.gitconfig to include this file:
#
#      vim ~/.gitconfig
#
# Include the path to the alias file:
#
#     [include]
#     path = ~/.local/share/git/useful-git-aliases.conf
#
## License
#
# Created by Brett Terpstra
# This file is licensed under the MIT License.
# See <https://opensource.org/licenses/MIT> for details.
#
# Includes aliases from <https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/>

[alias]
	init = init --template ~/.git_template

	# add
	a = add             # add
	chunk = add --patch # stage commits chunk by chunk

	# assume

	assume = update-index --assume-unchanged           # assume file unchanged
	unassume = update-index --no-assume-unchanged      # unassume file
	assumed = "!git ls-files -v | grep ^h | cut -c 3-" # show assumed files

	## Unassume all the assumed files
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

	## assume all unchanged
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

	# branch
	b = branch -v                     # branch (verbose)
	br = branch                       # branch shortcut

	# checkout
	co = checkout                 # checkout shortcut
	dev = checkout develop        # checkout develop branch
	discard = checkout --         # discard changes
	main = checkout main          # checkout main branch
	mast = checkout master        # checkout master branch
	mine = checkout --ours        # resolve conflicts with local copy
	nb = checkout -b              # create and switch to a new branch (mnemonic: "git new branch branchname...")
	theirs = checkout --theirs    # resolve conflicts with remote copy

	cl = clone                    # clone shortcut

	# cherry pick
  	cp = cherry-pick
	cpa = cherry-pick --abort     # abort the picking process
	cpc = cherry-pick --continue  # continue the picking process
	cpn = cherry-pick --no-commit # cherry-pick without making a commit

	# commit
	amend = commit --amend                 # amend your last commit
	ammend = commit --amend                # Because I always forget how many `m`s
	c = comm                               # commit with git-comm
	ca = commit -am                        # commit all with message
	ci = commit                            # commit file
	cm = commit -m                         # commit with message
  	cam = commit --amend --message         # amend and edit the message.
  	caa = commit --amend --all             # amend all changes
  	caam = commit --amend --all --message  # amend all changes and edit the message
	caane = commit --amend --all --no-edit # amend all changes without editing the message

	# help
	## Opens man page in VS Code
	shelp = "!shelp() { MANWIDTH=80 MANPAGER='col -bx' git help \"$@\" | code - ;}; shelp"
	whelp = help -w                        # Opens web-based man page

	# log
	bullets = log --pretty=format:\" * %s\" # Markdown bullet list of commit messages
	changes = log --oneline --reverse       # List of commit messages with hash
	fl = log -u                             # See all the commits related to a file, with the diff of the changes

	## Pretty history graph
	h = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	l = log --graph --date=short            # history graph with short dates

	## Log with changed files
	ll = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	dl = "!git ll -1"                       # show changed files for last commit

	## Log with hash, relative date, committer, and message
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"

	# merge

    ma = merge --abort    # merge abort - cancel the merging process
    mc = merge --continue # continue the merging process

	# misc
	cleancopy = !git archive $1 | tar -x -C "$2" # export a clean copy of repo

	dc = diff --cached    # diff cached

	## Show diff up to X commits back
	## $1 number of commits to diff back
	## $2 [optional] path to show diff for
	diffto = "!diffto() { local count=$1; shift; git diff HEAD~$count $*; }; diffto"

	dump = cat-file -p            # dump file contents
	filelog = log -u              # show changes to a file
	f = "!git ls-files | grep -i" # find file path in codebase
	gr = grep -Ii                 # grep entire codebase for string

	## Grep from root folder
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	gt = "!gtcd() { cd $(git rev-parse --show-toplevel);}; gtcd" # cd to top level (go top)
	top = rev-parse --show-toplevel                              # Show top level folder of repo
	ignored = status --ignored                                   # show ignored files

	la = "!git config -l | grep alias | cut -c 7-" # list all aliases

	ls = ls-files
	lsi = ls-files --ignored --exclude-standard           # list ignored files
	lsio = ls-files --ignored --others --exclude-standard # list ignored and unstaged files
	mt = mergetool                                        # fire up the merge tool
	origin = remote show origin                           # show origin(s) for repo
	p = pull                     # pull shortcut
	pp = push                    # push shortcut
	pulld = pull origin develop  # pull develop branch
	pullm = pull origin main     # pull main branch
	pushd = push origin develop  # push develop branch
	pushm = push origin main     # push main branch
	rmc = "rm -r --cached"       # remove file from git cache

	type = cat-file -t # show file type

	## Undo X commits and create new branch
	## $1 new branch name
	## $2 number of commits to move to new branch
	undo = "!git branch $1 && git reset --hard HEAD~$2 && git switch $1"

	what = whatchanged           # show commits and what files changed

	## Rename branch as done-[branch]
	done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

	# rebase
	rb = rebase
	rba = rebase --abort              # rebase - abort the rebasing process
	rbc = rebase --continue           # rebase - continue the rebasing process
	rbs = rebase --skip               # rebase - skip the current patch
	rbi = rebase --interactive        # rebase - interactive rebase

	# remotes
	r = remote -v                     # show remotes (verbose)

	# reset

	r = reset                         # basic reset
	r1 = reset HEAD^                  # reset head to last commit
	r2 = reset HEAD^^                 # reset head two commits back
	rh = reset --hard                 # hard reset
	rh1 = reset HEAD^ --hard          # erase changes back to last commit
	rh2 = reset HEAD^^ --hard         # erase changes back to parent of last commit
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	unstage = reset HEAD              # remove files from index (tracking)

	# stash
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)
	sl = stash list                   # list stashes
	ss = stash save                   # stash changes

	# status
	s = status      # status shortcut
	st = status -sb
	#            │└ short format
	#            └ show branch and tracking info

	# submodules
	subinit = submodule update --init         # init submodules
	subup = submodule foreach git pull origin # update all submodules

	# tags
	tags = tag -n1 -l                             # list all tags
	lasttag = describe --always --tag --abbrev=0  # show last tag

	# Execute shell scripts in the top directory.
	exec = ! exec

