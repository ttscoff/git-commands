# ## Usage
#
# Usage for a typical user is easy.
#
# Save this file somewhere on your system. I like to put it
# in a folder I sync with Dropbox between my machines:
#
#      ~/.local/share/git/useful-aliases.conf
#
# Edit ~/.gitconfig to include this file:
#
#      vim ~/.gitconfig
#
# Include the path to the alias file:
#
#     [include]
#     path = ~/.local/share/git/useful-aliases.conf
#
## License
#
# Created by Brett Terpstra
# This file is licensed under the MIT License.
# See <https://opensource.org/licenses/MIT> for details.

[alias]
	init = init --template ~/.git_template

	# add
	a = add                           # add
	chunk = add --patch               # stage commits chunk by chunk

	# branch
	b = branch -v                     # branch (verbose)
	br = branch

	# checkout
	co = checkout                     # checkout
	dev = checkout develop
	discard = checkout --
	main = checkout main
	mast = checkout master
	mine = checkout --ours            # resolve conflicts with local copy
	nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
	theirs = checkout --theirs        # resolve conflicts with remote copy

	# cherry pick
  	cp = cherry-pick
	cpa = cherry-pick --abort         # abort the picking process
	cpc = cherry-pick --continue      # continue the picking process
	cpn = cherry-pick --no-commit     # cherry-pick without making a commit

	# commit
	amend = commit --amend            # a[m]mend your last commit
	ammend = commit --amend           # Because I always forget
	c = comm                          # commit with git-comm
	ca = commit -am
	ci = commit
	cm = commit -m                    # commit with message
  	cam = commit --amend --message    # amend and edit the message.
  	caa = commit --amend --all        # amend all changes
  	caam = commit --amend --all --message # amend all changes and edit the message
	caane = commit --amend --all --no-edit  # amend all changes without editing the message

	# help
	## Opens man page in VS Code
	shelp = "!shelp() { MANWIDTH=80 MANPAGER='col -bx' git help \"$@\" | code - ;}; shelp"
	whelp = help -w                   # Opens web-based man page

	# log
	bullets = log --pretty=format:\" * %s\"
	changes = log --oneline --reverse
	files = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	h = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	l = log --graph --date=short
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"

	# merge

    ma = merge --abort   # merge abort - cancel the merging process
    mc = merge --continue # continue the merging process

	# misc
	cleancopy = !git archive $1 | tar -x -C "$2"
	## Show diff up to X commits back
	diffto = "!diffto() { local count=$1; shift; git diff HEAD~$count $*; }; diffto"
	dump = cat-file -p
	filelog = log -u                  # show changes to a file
	gt = "!gtcd() { cd $(git rev-parse --show-toplevel);}; gtcd" # cd to top level
	ignored = status --ignored # show ignored files
	ls = ls-files
	lsi = ls-files --ignored --exclude-standard # list ignored files
	lsio = ls-files --ignored --others --exclude-standard # list ignored and unstaged files
	mt = mergetool                    # fire up the merge tool
	origin = remote show origin
	p = pull
	pp = push
	pulld = pull origin develop
	pullm = pull origin main
	pushd = push origin develop
	pushm = push origin main
	rmc = "rm -r --cached"
	top = rev-parse --show-toplevel   # Go to top level folder of repo
	type = cat-file -t
	what = whatchanged

	# rebase
	rb = rebase
	rba = rebase --abort              # rebase - abort the rebasing process
	rbc = rebase --continue           # rebase - continue the rebasing process
	rbs = rebase --skip               # rebase - skip the current patch
	rbi = rebase --interactive        # rebase - interactive rebase

	# remotes
	r = remote -v                     # show remotes (verbose)

	# reset
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	unstage = reset HEAD              # remove files from index (tracking)

	# stash
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)
	sl = stash list                   # list stashes
	ss = stash                        # stash changes

	# status
	s = status
	st = status -sb

	# submodules
	subinit = submodule update --init
	subup = submodule foreach git pull origin

	# tags
	tags = tag -n1 -l
	lasttag = describe --always --tag --abbrev=0


	# Execute shell scripts in the top directory.
	exec = ! exec

